[gd_scene load_steps=43 format=2]

[ext_resource path="res://GameObjects/Units/Ship.tscn" type="PackedScene" id=1]
[ext_resource path="res://Resources/Materials/Textures/shield_shatter_texture.tres" type="Texture" id=2]
[ext_resource path="res://GameObjects/Buffs/EnergyShield.cs" type="Script" id=3]

[sub_resource type="CSharpScript" id=26]
script/source = "using Godot;
using System;

public class AlienMissile : Ship
{
	// Declare member variables here. Examples:
	// private int a = 2;
	// private string b = \"text\";
	[Export]
	private int MissileDamage = 1;

	[Signal]
	public delegate void MissileChargeFinished();

	// Called when the node enters the scene tree for the first time.
	public override void _Ready()
	{
		base._Ready();
	}

	// Called every frame. 'delta' is the elapsed time since the previous frame.
//	public override void _Process(float delta)
//	{
//		base._Process(delta);
//	}

	public void ChargeFinished() {
		EmitSignal(nameof(MissileChargeFinished));
	}

	public void ChargeMissile() {
		GetNode<AnimationPlayer>(\"AnimationPlayer\").Play(\"Charge\");
	}

	public override void HandleCollision(KinematicCollision collision) {
		if(collision != null) {
			if(collision.Collider is Destructible destructible) {
				destructible.TakeDamage(MissileDamage);
			}
			DestroySelf();
			SetProcess(false);
		}
	}

	public void SetTarget(Destructible target) {
		InitializeDirection(target.GlobalTransform.origin - GlobalTransform.origin);
	}
	
	public override void SpawnShip() {
		// Here I should pick a random earthling and find the direction to it
		Godot.Collections.Array earthlings = GetTree().GetNodesInGroup(\"Earthling\");
		Godot.Collections.Array<Spatial> targets = new Godot.Collections.Array<Spatial>(earthlings);
		int randomIndex = Mathf.Abs((int)GD.Randi()) % targets.Count;
		InitializeDirection(targets[randomIndex].GlobalTransform.origin - GlobalTransform.origin);		
	}
}
"

[sub_resource type="SphereShape" id=27]

[sub_resource type="AnimationNodeAnimation" id=28]
animation = "Charge"

[sub_resource type="AnimationNodeAnimation" id=29]
animation = "Destroy"

[sub_resource type="AnimationNodeAnimation" id=30]
animation = "Idle"

[sub_resource type="AnimationNodeStateMachineTransition" id=31]

[sub_resource type="AnimationNodeStateMachineTransition" id=32]

[sub_resource type="AnimationNodeStateMachine" id=33]
states/Charge/node = SubResource( 28 )
states/Charge/position = Vector2( 320, 58 )
states/Destroy/node = SubResource( 29 )
states/Destroy/position = Vector2( 733, 58 )
states/Idle/node = SubResource( 30 )
states/Idle/position = Vector2( 545, 58 )
transitions = [ "Charge", "Idle", SubResource( 31 ), "Idle", "Destroy", SubResource( 32 ) ]
start_node = "Charge"
graph_offset = Vector2( -115, 0 )

[sub_resource type="AnimationNodeStateMachinePlayback" id=34]

[sub_resource type="Shader" id=35]
code = "/*
	バブルシェーダー by あるる（きのもと 結衣） @arlez80
	Bubble Shader by Yui Kinomoto @arlez80

	MIT License
*/

shader_type spatial;
render_mode depth_draw_never, cull_front, blend_mul;

uniform sampler2D _NoiseTex;
uniform float _Scale : hint_range(0.0, 0.05) = 0.05;
uniform float _Opacity: hint_range(0.01, 10.0) = 10.0;
uniform float _Edge : hint_range(0.0, 1.0) = 0.1;
uniform vec4 _ColorAura : hint_color = vec4(1.0,0.0,0.0,1.0);
uniform vec4 _ColorRim : hint_color = vec4(0.0,0.0,1.0,1.0);
uniform float _Brightness: hint_range(0.5, 20.0) = 2.0;
uniform float _SpeedX: hint_range(-10.0, 10.0) = 0.0;
uniform float _SpeedY: hint_range(-10.0, 10.0) = 3.0;
uniform float _OffsetFade: hint_range(-10.0, 10.0) = 1.0;
uniform float _GlowBrightness: hint_range(0.01, 30.0) = 3.0;
uniform float _OutlineFixed: hint_range(0.0, 5.0) = 2.0;
uniform float _RimPower2: hint_range(0.01, 10.0) = 6.0;

uniform float fuwafuwa_speed = 1.5;
uniform float fuwafuwa_size = 0.05;

uniform vec4 outline_color : hint_color = vec4( 0.45, 0.70, 1.0, 1.0 );
uniform float outline_ratio = 1.0;
uniform float noise_speed = 0.2;
uniform float noise_scale = 0.5;

vec3 hsv2rgb( float h, float s, float v )
{
	return (
		(
			clamp(
				abs( fract( h + vec3( 0.0, 2.0, 1.0 ) / 3.0 ) * 6.0 - 3.0 ) - 1.0
			,	0.0
			,	1.0
			) - 1.0
		) * s + 1.0
	) * v;
}

float random( vec2 pos )
{ 
	return fract(sin(dot(pos, vec2(12.9898,78.233))) * 43758.5453);
}

void vertex( )
{
	vec3 v = clamp( cos( VERTEX * 10.0 + vec3( TIME * fuwafuwa_speed ) ) + vec3( 1.0 ), 0.0, 1.0 );
	VERTEX *= 1.0 + dot( v, v ) * fuwafuwa_size * 0.5;
	VERTEX	 = (NORMAL * _Edge) + VERTEX;
}

float saturate(float value)
{
	return clamp(value,0.0,1.0);
}

void fragment( )
{	
	// noise
	float speedx = TIME * _SpeedX * 0.005;
	float speedy = TIME * _SpeedY * -0.005;
	vec4 n = texture(_NoiseTex, vec2(UV.x * _Scale + speedx, UV.y * _Scale + speedy));
	// same noise, but bigger
	vec4 n2 = texture(_NoiseTex, vec2(UV.x* (_Scale * 0.5) + speedx, UV.y * (_Scale * 0.5) + speedy));
	// same but smaller
	vec4 n3 = texture(_NoiseTex, vec2(UV.x* (_Scale * 2.0) + speedx, UV.y * (_Scale * 2.0) + speedy));
	// combined
	float combinedNoise = (n.r * n2.r * 2.0) * n3.r * 2.0;
	
	float rims = pow(saturate(dot(VIEW, NORMAL)), _RimPower2); // calculate inverted rim based on view and normal
	vec4 rim = vec4(rims);
	rim -= combinedNoise; // subtract noise texture
	rim += (rims * _OutlineFixed);
	vec4 texturedRim = vec4(saturate(rim.a * _Opacity)); // make a harder edge
	vec4 extraRim = (saturate((_Edge + rim.a) * _Opacity) - texturedRim) * _Brightness;// extra edge, subtracting the textured rim
	vec4 result = (_ColorAura * texturedRim) + (_ColorRim * extraRim);// combine both with colors
	float fade = saturate((FRAGCOORD.y + _OffsetFade) * 2.0);
	
	result *= fade;
	
	EMISSION = vec3(result.r, result.g, result.b);
	ALPHA = result.a;
	
	float outline_alpha = clamp( ( 1.0 - dot( NORMAL, VIEW ) ) * outline_ratio, 0.0, 1.0 );
	vec3 color = hsv2rgb( outline_alpha - 1.5 + noise_speed * TIME, 1.0, 1.0 ) * noise_scale;
	color.g = 0f;
	color.b = 0f;

	ALBEDO = mix( color, outline_color.rgb, max( outline_alpha - 0.3, 0.0 ) );
	ALPHA = outline_color.a * outline_alpha;
}"

[sub_resource type="OpenSimplexNoise" id=36]
seed = 2
octaves = 5
period = 59.8

[sub_resource type="NoiseTexture" id=37]
seamless = true
noise = SubResource( 36 )

[sub_resource type="ShaderMaterial" id=38]
shader = SubResource( 35 )
shader_param/_Scale = 0.05
shader_param/_Opacity = 2.055
shader_param/_Edge = 0.1
shader_param/_ColorAura = Color( 1, 0, 0, 1 )
shader_param/_ColorRim = Color( 0.866667, 0, 0, 1 )
shader_param/_Brightness = 2.0
shader_param/_SpeedX = 3.0
shader_param/_SpeedY = 3.0
shader_param/_OffsetFade = 1.0
shader_param/_GlowBrightness = 30.0
shader_param/_OutlineFixed = 0.622
shader_param/_RimPower2 = 10.0
shader_param/fuwafuwa_speed = 10.0
shader_param/fuwafuwa_size = 0.05
shader_param/outline_color = Color( 0.94902, 0, 0, 1 )
shader_param/outline_ratio = 100.0
shader_param/noise_speed = 0.2
shader_param/noise_scale = 0.5
shader_param/_NoiseTex = SubResource( 37 )

[sub_resource type="SphereMesh" id=39]
resource_local_to_scene = true
material = SubResource( 38 )

[sub_resource type="Animation" id=40]
tracks/0/type = "value"
tracks/0/path = NodePath("Particles:emitting")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("MeshInstance:mesh:radius")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.1, 1.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("MeshInstance:mesh:height")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.2, 2.0 ]
}
tracks/3/type = "method"
tracks/3/path = NodePath(".")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 1 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "ChargeFinished"
} ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("CollisionShape:disabled")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("MeshInstance:visible")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/6/type = "value"
tracks/6/path = NodePath(".:visible")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}

[sub_resource type="Shader" id=41]
code = "shader_type particles;

//this defines how far out the particles will spawn
uniform float particle_spawn_radius = 1f;

const float PI = 3.14159265358979323846;

//input a value that changes over time and can also be a coordinate
//use vec(TIME,0) if you got no coordinates
float rand(vec2 co){
    //this will give a pseudorandom value between 0-1
    return fract(sin(dot(co.xy ,vec2(23.21,101.83))) * 34759.214);
}

void vertex() {
	// Sets up everything
	// Spawn particles in a radius around the emitter
	if(RESTART) {
		//set the position to be randomly dispersed in an area
		float h_modifier = (rand(vec2(TIME,0))*2f*PI);
		float v_modifier = (rand(vec2(TIME+1f,0))*2f*PI);
		float x_coord = particle_spawn_radius * cos(h_modifier);
		float y_coord = particle_spawn_radius * sin(h_modifier);
		float z_coord = particle_spawn_radius * sin(v_modifier);
		
		//centers effect
		TRANSFORM[3][0] = x_coord;
		TRANSFORM[3][1] = y_coord;
		TRANSFORM[3][2] = z_coord;
		
		VELOCITY = -1f * vec3(TRANSFORM[3][0], TRANSFORM[3][1], TRANSFORM[3][2]);
	}
}"

[sub_resource type="ShaderMaterial" id=42]
shader = SubResource( 41 )
shader_param/particle_spawn_radius = 1.0

[sub_resource type="SpatialMaterial" id=43]
albedo_color = Color( 0.972549, 0, 0, 0.705882 )
metallic = 0.27
metallic_specular = 0.72
emission_enabled = true
emission = Color( 0.721569, 0, 0, 1 )
emission_energy = 1.0
emission_operator = 0
emission_on_uv2 = false

[sub_resource type="SphereMesh" id=44]
material = SubResource( 43 )
radius = 0.1
height = 0.2
radial_segments = 8
rings = 4

[sub_resource type="SphereShape" id=6]
radius = 1.3

[sub_resource type="SphereMesh" id=7]
radius = 1.3
height = 2.6

[sub_resource type="VisualShaderNodeInput" id=8]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=9]
output_port_for_preview = 0
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeScalarUniform" id=10]
uniform_name = "ShatterVariable"

[sub_resource type="VisualShaderNodeScalarFunc" id=11]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=12]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "time"

[sub_resource type="VisualShaderNodeColorConstant" id=14]
constant = Color( 0.0195313, 0.747223, 1, 1 )

[sub_resource type="VisualShaderNodeScalarFunc" id=15]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeScalarOp" id=16]
operator = 7

[sub_resource type="VisualShaderNodeScalarFunc" id=17]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=18]
default_input_values = [ 0, 0.0, 1, 0.4 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=19]
output_port_for_preview = 0
function = 12

[sub_resource type="VisualShaderNodeScalarUniform" id=20]
uniform_name = "power"

[sub_resource type="VisualShader" id=21]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform float power;
uniform sampler2D tex_frg_11;
uniform float ShatterVariable;



void vertex() {
// Output:0

}

void fragment() {
// Color:2
	vec3 n_out2p0 = vec3(0.019531, 0.747223, 1.000000);
	float n_out2p1 = 1.000000;

// ScalarUniform:9
	float n_out9p0 = power;

// ScalarFunc:3
	float n_out3p0 = sin(n_out9p0);

// ScalarOp:5
	float n_in5p1 = 0.40000;
	float n_out5p0 = n_out3p0 * n_in5p1;

// ScalarFunc:6
	float n_out6p0 = abs(n_out5p0);

// Input:10
	vec3 n_out10p0 = vec3(UV, 0.0);

// Texture:11
	vec4 tex_frg_11_read = texture(tex_frg_11, n_out10p0.xy);
	vec3 n_out11p0 = tex_frg_11_read.rgb;
	float n_out11p1 = tex_frg_11_read.a;

// ScalarUniform:15
	float n_out15p0 = ShatterVariable;

// ScalarFunc:16
	float n_out16p0 = sin(n_out15p0);

// ScalarOp:17
	float n_out17p0 = dot(n_out11p0, vec3(0.333333, 0.333333, 0.333333)) - n_out16p0;

// ScalarFunc:20
	float n_out20p0 = round(n_out17p0);

// ScalarOp:21
	float n_out21p0 = min(n_out6p0, n_out20p0);

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out21p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -460, 380.363 )
modes/cull = 2
nodes/fragment/0/position = Vector2( 600, 140 )
nodes/fragment/2/node = SubResource( 14 )
nodes/fragment/2/position = Vector2( 40, 160 )
nodes/fragment/3/node = SubResource( 17 )
nodes/fragment/3/position = Vector2( -160, 260 )
nodes/fragment/5/node = SubResource( 18 )
nodes/fragment/5/position = Vector2( 40, 240 )
nodes/fragment/6/node = SubResource( 19 )
nodes/fragment/6/position = Vector2( 220, 240 )
nodes/fragment/9/node = SubResource( 20 )
nodes/fragment/9/position = Vector2( -340, 260 )
nodes/fragment/10/node = SubResource( 8 )
nodes/fragment/10/position = Vector2( -460, 420 )
nodes/fragment/11/node = SubResource( 9 )
nodes/fragment/11/position = Vector2( -280, 400 )
nodes/fragment/15/node = SubResource( 10 )
nodes/fragment/15/position = Vector2( -440, 740 )
nodes/fragment/16/node = SubResource( 11 )
nodes/fragment/16/position = Vector2( -100, 700 )
nodes/fragment/17/node = SubResource( 12 )
nodes/fragment/17/position = Vector2( 20, 440 )
nodes/fragment/18/node = SubResource( 13 )
nodes/fragment/18/position = Vector2( -440, 640 )
nodes/fragment/20/node = SubResource( 15 )
nodes/fragment/20/position = Vector2( 200, 440 )
nodes/fragment/21/node = SubResource( 16 )
nodes/fragment/21/position = Vector2( 420, 240 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 5, 0, 6, 0, 3, 0, 5, 0, 10, 0, 11, 0, 9, 0, 3, 0, 17, 0, 20, 0, 6, 0, 21, 0, 21, 0, 0, 1, 16, 0, 17, 1, 15, 0, 16, 0, 11, 0, 17, 0, 20, 0, 21, 1 )

[sub_resource type="ShaderMaterial" id=45]
resource_local_to_scene = true
shader = SubResource( 21 )
shader_param/power = 0.0
shader_param/ShatterVariable = -0.5

[sub_resource type="Animation" id=23]
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("MeshInstance:material/0:shader_param/power")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 1.57, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("MeshInstance:material/0:shader_param/ShatterVariable")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ -0.5, -0.5 ]
}

[sub_resource type="Animation" id=24]
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("MeshInstance:material/0:shader_param/power")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 0.0 ]
}

[sub_resource type="Animation" id=25]
resource_name = "ShieldShatter"
tracks/0/type = "value"
tracks/0/path = NodePath("MeshInstance:material/0:shader_param/power")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 1.57, 1.57 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("MeshInstance:material/0:shader_param/ShatterVariable")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ -0.5, 0.5 ]
}

[node name="AlienMissile" groups=[
"Alien",
] instance=ExtResource( 1 )]
script = SubResource( 26 )

[node name="CollisionShape" parent="." index="0"]
shape = SubResource( 27 )

[node name="AnimationTree" parent="." index="2"]
tree_root = SubResource( 33 )
parameters/playback = SubResource( 34 )

[node name="MeshInstance" parent="." index="3"]
visible = true
mesh = SubResource( 39 )
material/0 = null

[node name="AnimationPlayer" parent="." index="4"]
anims/Charge = SubResource( 40 )

[node name="Particles" type="Particles" parent="." index="5"]
emitting = false
amount = 20
process_material = SubResource( 42 )
draw_pass_1 = SubResource( 44 )

[node name="EnergyShield" parent="." index="6"]
script = ExtResource( 3 )

[node name="CollisionShape" type="CollisionShape" parent="EnergyShield" index="0"]
shape = SubResource( 6 )
disabled = true

[node name="MeshInstance" type="MeshInstance" parent="EnergyShield" index="1"]
mesh = SubResource( 7 )
material/0 = SubResource( 45 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="EnergyShield" index="2"]
anims/DamageImpact = SubResource( 23 )
anims/Idle = SubResource( 24 )
anims/ShieldShatter = SubResource( 25 )

[node name="OverloadTimer" type="Timer" parent="EnergyShield" index="3"]
wait_time = 5.0
one_shot = true

[node name="RecoveryPeriodTimer" type="Timer" parent="EnergyShield" index="4"]
one_shot = true
