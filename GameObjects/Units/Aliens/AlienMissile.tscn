[gd_scene load_steps=9 format=2]

[ext_resource path="res://GameObjects/Units/Ship.tscn" type="PackedScene" id=1]
[ext_resource path="res://GameObjects/Units/Aliens/AlienMissile.cs" type="Script" id=2]

[sub_resource type="SphereShape" id=1]

[sub_resource type="Shader" id=2]
code = "/*
	バブルシェーダー by あるる（きのもと 結衣） @arlez80
	Bubble Shader by Yui Kinomoto @arlez80

	MIT License
*/

shader_type spatial;
render_mode depth_draw_never, cull_front, blend_add;

uniform sampler2D _NoiseTex;
uniform float _Scale : hint_range(0.0, 0.05) = 0.05;
uniform float _Opacity: hint_range(0.01, 10.0) = 10.0;
uniform float _Edge : hint_range(0.0, 1.0) = 0.1;
uniform vec4 _ColorAura : hint_color = vec4(1.0,0.0,0.0,1.0);
uniform vec4 _ColorRim : hint_color = vec4(0.0,0.0,1.0,1.0);
uniform float _Brightness: hint_range(0.5, 20.0) = 2.0;
uniform float _SpeedX: hint_range(-10.0, 10.0) = 0.0;
uniform float _SpeedY: hint_range(-10.0, 10.0) = 3.0;
uniform float _OffsetFade: hint_range(-10.0, 10.0) = 1.0;
uniform float _GlowBrightness: hint_range(0.01, 30.0) = 3.0;
uniform float _OutlineFixed: hint_range(0.0, 5.0) = 2.0;
uniform float _RimPower2: hint_range(0.01, 10.0) = 6.0;

uniform float fuwafuwa_speed = 1.5;
uniform float fuwafuwa_size = 0.05;

uniform vec4 outline_color : hint_color = vec4( 0.45, 0.70, 1.0, 1.0 );
uniform float outline_ratio = 1.0;
uniform float noise_speed = 0.2;
uniform float noise_scale = 0.5;

vec3 hsv2rgb( float h, float s, float v )
{
	return (
		(
			clamp(
				abs( fract( h + vec3( 0.0, 2.0, 1.0 ) / 3.0 ) * 6.0 - 3.0 ) - 1.0
			,	0.0
			,	1.0
			) - 1.0
		) * s + 1.0
	) * v;
}

float random( vec2 pos )
{ 
	return fract(sin(dot(pos, vec2(12.9898,78.233))) * 43758.5453);
}

void vertex( )
{
	vec3 v = clamp( cos( VERTEX * 10.0 + vec3( TIME * fuwafuwa_speed ) ) + vec3( 1.0 ), 0.0, 1.0 );
	VERTEX *= 1.0 + dot( v, v ) * fuwafuwa_size * 0.5;
	VERTEX	 = (NORMAL * _Edge) + VERTEX;
}

float saturate(float value)
{
	return clamp(value,0.0,1.0);
}

void fragment( )
{	
	// noise
	float speedx = TIME * _SpeedX * 0.005;
	float speedy = TIME * _SpeedY * -0.005;
	vec4 n = texture(_NoiseTex, vec2(SCREEN_UV.x * _Scale + speedx, SCREEN_UV.y * _Scale + speedy));
	// same noise, but bigger
	vec4 n2 = texture(_NoiseTex, vec2(SCREEN_UV.x* (_Scale * 0.5) + speedx, SCREEN_UV.y * (_Scale * 0.5) + speedy));
	// same but smaller
	vec4 n3 = texture(_NoiseTex, vec2(SCREEN_UV.x* (_Scale * 2.0) + speedx, SCREEN_UV.y * (_Scale * 2.0) + speedy));
	// combined
	float combinedNoise = (n.r * n2.r * 2.0) * n3.r * 2.0;
	
	float rims = pow(saturate(dot(VIEW, NORMAL)), _RimPower2); // calculate inverted rim based on view and normal
	vec4 rim = vec4(rims);
	rim -= combinedNoise; // subtract noise texture
	rim += (rims * _OutlineFixed);
	vec4 texturedRim = vec4(saturate(rim.a * _Opacity)); // make a harder edge
	vec4 extraRim = (saturate((_Edge + rim.a) * _Opacity) - texturedRim) * _Brightness;// extra edge, subtracting the textured rim
	vec4 result = (_ColorAura * texturedRim) + (_ColorRim * extraRim);// combine both with colors
	float fade = saturate((VERTEX.y + _OffsetFade) * 2.0);
	
	result *= fade;
	
	EMISSION = vec3(result.r, result.g, result.b);
	ALPHA = result.a;
	
	float outline_alpha = clamp( ( 1.0 - dot( NORMAL, VIEW ) ) * outline_ratio, 0.0, 1.0 );
	vec3 color = hsv2rgb( outline_alpha - 1.5 + noise_speed * TIME, 1.0, 1.0 ) * noise_scale;
	color.g = 0f;
	color.b = 0f;

	ALBEDO = mix( color, outline_color.rgb, max( outline_alpha - 0.3, 0.0 ) );
	//ALPHA = outline_color.a * outline_alpha;
}"

[sub_resource type="OpenSimplexNoise" id=5]
seed = 2
octaves = 5
period = 59.8

[sub_resource type="NoiseTexture" id=6]
noise = SubResource( 5 )

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/_Scale = 0.05
shader_param/_Opacity = 10.0
shader_param/_Edge = 0.496
shader_param/_ColorAura = Color( 0.952941, 0.184314, 0.184314, 1 )
shader_param/_ColorRim = Color( 0.894118, 0.407843, 0.407843, 1 )
shader_param/_Brightness = 2.0
shader_param/_SpeedX = 3.0
shader_param/_SpeedY = 3.0
shader_param/_OffsetFade = 1.0
shader_param/_GlowBrightness = 3.0
shader_param/_OutlineFixed = 2.0
shader_param/_RimPower2 = 6.0
shader_param/fuwafuwa_speed = 1.5
shader_param/fuwafuwa_size = 0.05
shader_param/outline_color = Color( 1, 0, 0, 1 )
shader_param/outline_ratio = 2.0
shader_param/noise_speed = 2.0
shader_param/noise_scale = 1.437
shader_param/_NoiseTex = SubResource( 6 )

[sub_resource type="SphereMesh" id=4]
material = SubResource( 3 )

[node name="AlienMissile" groups=[
"Alien",
] instance=ExtResource( 1 )]
script = ExtResource( 2 )
Health = 1
MaxHealth = 1

[node name="CollisionShape" parent="." index="0"]
shape = SubResource( 1 )

[node name="MeshInstance" parent="." index="3"]
visible = true
mesh = SubResource( 4 )
material/0 = null
