[gd_scene load_steps=21 format=2]

[ext_resource path="res://GameObjects/Units/Ship.tscn" type="PackedScene" id=1]

[sub_resource type="CSharpScript" id=1]
script/source = "using Godot;
using System;

public class AlienMissile : Ship
{
	// Declare member variables here. Examples:
	// private int a = 2;
	// private string b = \"text\";
	[Export]
	private int MissileDamage = 1;

	[Signal]
	public delegate void MissileChargeFinished();

	// Called when the node enters the scene tree for the first time.
	public override void _Ready()
	{
		base._Ready();
	}

	// Called every frame. 'delta' is the elapsed time since the previous frame.
//	public override void _Process(float delta)
//	{
//		base._Process(delta);
//	}

	public void ChargeFinished() {
		EmitSignal(nameof(MissileChargeFinished));
	}

	public void ChargeMissile() {
		GetNode<AnimationPlayer>(\"AnimationPlayer\").Play(\"Charge\");
	}

	public override void HandleCollision(KinematicCollision collision) {
		if(collision != null) {
			if(collision.Collider is Destructible destructible) {
				destructible.TakeDamage(MissileDamage);
			}
			DestroySelf();
			SetProcess(false);
		}
	}

	public void SetTarget(Destructible target) {
		InitializeDirection(target.GlobalTransform.origin - GlobalTransform.origin);
	}
	
	public override void SpawnShip() {
		// Here I should pick a random earthling and find the direction to it
		Godot.Collections.Array earthlings = GetTree().GetNodesInGroup(\"Earthling\");
		Godot.Collections.Array<Spatial> targets = new Godot.Collections.Array<Spatial>(earthlings);
		int randomIndex = Mathf.Abs((int)GD.Randi()) % targets.Count;
		InitializeDirection(targets[randomIndex].GlobalTransform.origin - GlobalTransform.origin);		
	}
}
"

[sub_resource type="SphereShape" id=22]

[sub_resource type="AnimationNodeAnimation" id=3]
animation = "Charge"

[sub_resource type="AnimationNodeAnimation" id=4]
animation = "Destroy"

[sub_resource type="AnimationNodeAnimation" id=5]
animation = "Idle"

[sub_resource type="AnimationNodeStateMachineTransition" id=6]

[sub_resource type="AnimationNodeStateMachineTransition" id=7]

[sub_resource type="AnimationNodeStateMachine" id=8]
states/Charge/node = SubResource( 3 )
states/Charge/position = Vector2( 320, 58 )
states/Destroy/node = SubResource( 4 )
states/Destroy/position = Vector2( 733, 58 )
states/Idle/node = SubResource( 5 )
states/Idle/position = Vector2( 545, 58 )
transitions = [ "Charge", "Idle", SubResource( 6 ), "Idle", "Destroy", SubResource( 7 ) ]
start_node = "Charge"
graph_offset = Vector2( -115, 0 )

[sub_resource type="AnimationNodeStateMachinePlayback" id=9]

[sub_resource type="Shader" id=10]
code = "/*
	バブルシェーダー by あるる（きのもと 結衣） @arlez80
	Bubble Shader by Yui Kinomoto @arlez80

	MIT License
*/

shader_type spatial;
render_mode depth_draw_never, cull_front, blend_mul;

uniform sampler2D _NoiseTex;
uniform float _Scale : hint_range(0.0, 0.05) = 0.05;
uniform float _Opacity: hint_range(0.01, 10.0) = 10.0;
uniform float _Edge : hint_range(0.0, 1.0) = 0.1;
uniform vec4 _ColorAura : hint_color = vec4(1.0,0.0,0.0,1.0);
uniform vec4 _ColorRim : hint_color = vec4(0.0,0.0,1.0,1.0);
uniform float _Brightness: hint_range(0.5, 20.0) = 2.0;
uniform float _SpeedX: hint_range(-10.0, 10.0) = 0.0;
uniform float _SpeedY: hint_range(-10.0, 10.0) = 3.0;
uniform float _OffsetFade: hint_range(-10.0, 10.0) = 1.0;
uniform float _GlowBrightness: hint_range(0.01, 30.0) = 3.0;
uniform float _OutlineFixed: hint_range(0.0, 5.0) = 2.0;
uniform float _RimPower2: hint_range(0.01, 10.0) = 6.0;

uniform float fuwafuwa_speed = 1.5;
uniform float fuwafuwa_size = 0.05;

uniform vec4 outline_color : hint_color = vec4( 0.45, 0.70, 1.0, 1.0 );
uniform float outline_ratio = 1.0;
uniform float noise_speed = 0.2;
uniform float noise_scale = 0.5;

vec3 hsv2rgb( float h, float s, float v )
{
	return (
		(
			clamp(
				abs( fract( h + vec3( 0.0, 2.0, 1.0 ) / 3.0 ) * 6.0 - 3.0 ) - 1.0
			,	0.0
			,	1.0
			) - 1.0
		) * s + 1.0
	) * v;
}

float random( vec2 pos )
{ 
	return fract(sin(dot(pos, vec2(12.9898,78.233))) * 43758.5453);
}

void vertex( )
{
	vec3 v = clamp( cos( VERTEX * 10.0 + vec3( TIME * fuwafuwa_speed ) ) + vec3( 1.0 ), 0.0, 1.0 );
	VERTEX *= 1.0 + dot( v, v ) * fuwafuwa_size * 0.5;
	VERTEX	 = (NORMAL * _Edge) + VERTEX;
}

float saturate(float value)
{
	return clamp(value,0.0,1.0);
}

void fragment( )
{	
	// noise
	float speedx = TIME * _SpeedX * 0.005;
	float speedy = TIME * _SpeedY * -0.005;
	vec4 n = texture(_NoiseTex, vec2(UV.x * _Scale + speedx, UV.y * _Scale + speedy));
	// same noise, but bigger
	vec4 n2 = texture(_NoiseTex, vec2(UV.x* (_Scale * 0.5) + speedx, UV.y * (_Scale * 0.5) + speedy));
	// same but smaller
	vec4 n3 = texture(_NoiseTex, vec2(UV.x* (_Scale * 2.0) + speedx, UV.y * (_Scale * 2.0) + speedy));
	// combined
	float combinedNoise = (n.r * n2.r * 2.0) * n3.r * 2.0;
	
	float rims = pow(saturate(dot(VIEW, NORMAL)), _RimPower2); // calculate inverted rim based on view and normal
	vec4 rim = vec4(rims);
	rim -= combinedNoise; // subtract noise texture
	rim += (rims * _OutlineFixed);
	vec4 texturedRim = vec4(saturate(rim.a * _Opacity)); // make a harder edge
	vec4 extraRim = (saturate((_Edge + rim.a) * _Opacity) - texturedRim) * _Brightness;// extra edge, subtracting the textured rim
	vec4 result = (_ColorAura * texturedRim) + (_ColorRim * extraRim);// combine both with colors
	float fade = saturate((FRAGCOORD.y + _OffsetFade) * 2.0);
	
	result *= fade;
	
	EMISSION = vec3(result.r, result.g, result.b);
	ALPHA = result.a;
	
	float outline_alpha = clamp( ( 1.0 - dot( NORMAL, VIEW ) ) * outline_ratio, 0.0, 1.0 );
	vec3 color = hsv2rgb( outline_alpha - 1.5 + noise_speed * TIME, 1.0, 1.0 ) * noise_scale;
	color.g = 0f;
	color.b = 0f;

	ALBEDO = mix( color, outline_color.rgb, max( outline_alpha - 0.3, 0.0 ) );
	ALPHA = outline_color.a * outline_alpha;
}"

[sub_resource type="OpenSimplexNoise" id=11]
seed = 2
octaves = 5
period = 59.8

[sub_resource type="NoiseTexture" id=12]
seamless = true
noise = SubResource( 11 )

[sub_resource type="ShaderMaterial" id=20]
shader = SubResource( 10 )
shader_param/_Scale = 0.05
shader_param/_Opacity = 2.055
shader_param/_Edge = 0.1
shader_param/_ColorAura = Color( 1, 0, 0, 1 )
shader_param/_ColorRim = Color( 0.866667, 0, 0, 1 )
shader_param/_Brightness = 2.0
shader_param/_SpeedX = 3.0
shader_param/_SpeedY = 3.0
shader_param/_OffsetFade = 1.0
shader_param/_GlowBrightness = 30.0
shader_param/_OutlineFixed = 0.622
shader_param/_RimPower2 = 10.0
shader_param/fuwafuwa_speed = 10.0
shader_param/fuwafuwa_size = 0.05
shader_param/outline_color = Color( 0.94902, 0, 0, 1 )
shader_param/outline_ratio = 100.0
shader_param/noise_speed = 0.2
shader_param/noise_scale = 0.5
shader_param/_NoiseTex = SubResource( 12 )

[sub_resource type="SphereMesh" id=21]
resource_local_to_scene = true
material = SubResource( 20 )
radius = 0.1
height = 0.2

[sub_resource type="Animation" id=15]
tracks/0/type = "value"
tracks/0/path = NodePath("Particles:emitting")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("MeshInstance:mesh:radius")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.1, 1.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("MeshInstance:mesh:height")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.2, 2.0 ]
}
tracks/3/type = "method"
tracks/3/path = NodePath(".")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 1 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "ChargeFinished"
} ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("CollisionShape:disabled")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("MeshInstance:visible")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/6/type = "value"
tracks/6/path = NodePath(".:visible")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}

[sub_resource type="Shader" id=16]
code = "shader_type particles;

//this defines how far out the particles will spawn
uniform float particle_spawn_radius = 1f;

const float PI = 3.14159265358979323846;

//input a value that changes over time and can also be a coordinate
//use vec(TIME,0) if you got no coordinates
float rand(vec2 co){
    //this will give a pseudorandom value between 0-1
    return fract(sin(dot(co.xy ,vec2(23.21,101.83))) * 34759.214);
}

void vertex() {
	// Sets up everything
	// Spawn particles in a radius around the emitter
	if(RESTART) {
		//set the position to be randomly dispersed in an area
		float h_modifier = (rand(vec2(TIME,0))*2f*PI);
		float v_modifier = (rand(vec2(TIME+1f,0))*2f*PI);
		float x_coord = particle_spawn_radius * cos(h_modifier);
		float y_coord = particle_spawn_radius * sin(h_modifier);
		float z_coord = particle_spawn_radius * sin(v_modifier);
		
		//centers effect
		TRANSFORM[3][0] = x_coord;
		TRANSFORM[3][1] = y_coord;
		TRANSFORM[3][2] = z_coord;
		
		VELOCITY = -1f * vec3(TRANSFORM[3][0], TRANSFORM[3][1], TRANSFORM[3][2]);
	}
}"

[sub_resource type="ShaderMaterial" id=17]
shader = SubResource( 16 )
shader_param/particle_spawn_radius = 1.0

[sub_resource type="SpatialMaterial" id=18]
albedo_color = Color( 0.972549, 0, 0, 0.705882 )
metallic = 0.27
metallic_specular = 0.72
emission_enabled = true
emission = Color( 0.721569, 0, 0, 1 )
emission_energy = 1.0
emission_operator = 0
emission_on_uv2 = false

[sub_resource type="SphereMesh" id=19]
material = SubResource( 18 )
radius = 0.1
height = 0.2
radial_segments = 8
rings = 4

[node name="AlienMissile" groups=[
"Alien",
] instance=ExtResource( 1 )]
script = SubResource( 1 )

[node name="CollisionShape" parent="." index="0"]
shape = SubResource( 22 )
disabled = true

[node name="AnimationTree" parent="." index="2"]
tree_root = SubResource( 8 )
parameters/playback = SubResource( 9 )

[node name="MeshInstance" parent="." index="3"]
visible = true
mesh = SubResource( 21 )
material/0 = null

[node name="AnimationPlayer" parent="." index="4"]
anims/Charge = SubResource( 15 )

[node name="Particles" type="Particles" parent="." index="5"]
amount = 20
process_material = SubResource( 17 )
draw_pass_1 = SubResource( 19 )
